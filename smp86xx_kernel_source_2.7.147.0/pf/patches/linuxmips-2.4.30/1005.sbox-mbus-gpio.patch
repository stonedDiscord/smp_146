diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linuxmips-2.4.30.ref/arch/mips/config-tango2.in linuxmips-2.4.30/arch/mips/config-tango2.in
--- linuxmips-2.4.30.ref/arch/mips/config-tango2.in	2006-09-18 18:34:34.000000000 -0700
+++ linuxmips-2.4.30/arch/mips/config-tango2.in	2006-09-18 18:36:04.000000000 -0700
@@ -64,5 +64,8 @@
  
 #define_bool CONFIG_UART_USE_SYSCLK y
  
+#define_bool CONFIG_SD_KEEP_SBOX_R1W1 y
+define_bool CONFIG_TANGO2_CACHE_PROC_INFO y
+ 
 endmenu
 
diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linuxmips-2.4.30.ref/arch/mips/tango2/Makefile linuxmips-2.4.30/arch/mips/tango2/Makefile
--- linuxmips-2.4.30.ref/arch/mips/tango2/Makefile	2006-09-18 18:34:25.000000000 -0700
+++ linuxmips-2.4.30/arch/mips/tango2/Makefile	2006-09-18 18:36:04.000000000 -0700
@@ -10,9 +10,9 @@
 
 O_TARGET:= tango2.o
  
-export-objs	+= prom.o delay.o
+export-objs	+= prom.o delay.o tango2api.o
  
-obj-y    := tango2IRQ.o setup.o prom.o gbus_standalone.o irq.o tango2controllers.o delay.o 
+obj-y    := tango2IRQ.o setup.o prom.o gbus_standalone.o irq.o tango2controllers.o delay.o tango2api.o
 
 ifdef CONFIG_TANGO2_XENV
 obj-y	+= sha1sum.o xenv.o full_sha1.o
diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linuxmips-2.4.30.ref/arch/mips/tango2/setup.c linuxmips-2.4.30/arch/mips/tango2/setup.c
--- linuxmips-2.4.30.ref/arch/mips/tango2/setup.c	2006-09-18 18:34:25.000000000 -0700
+++ linuxmips-2.4.30/arch/mips/tango2/setup.c	2006-09-18 18:36:04.000000000 -0700
@@ -209,5 +209,8 @@
 	ioport_resource.start = iomem_resource.start = 0x0;
 	ioport_resource.end = 0x80000000UL - 1;
 	iomem_resource.end = 0x80000000UL - 1;
+
+  	/* Initialize Switch box */
+  	em86xx_sbox_init();
 }
 
diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linuxmips-2.4.30.ref/arch/mips/tango2/tango2api.c linuxmips-2.4.30/arch/mips/tango2/tango2api.c
--- linuxmips-2.4.30.ref/arch/mips/tango2/tango2api.c	1969-12-31 16:00:00.000000000 -0800
+++ linuxmips-2.4.30/arch/mips/tango2/tango2api.c	2006-09-18 18:36:23.000000000 -0700
@@ -0,0 +1,749 @@
+/*****************************************
+ Copyright Â© 2001-2003  
+ Sigma Designs, Inc. All Rights Reserved
+ Proprietary and Confidential
+ *****************************************/
+/**
+  @file  tango2api.c
+  @brief  
+
+  Misc. support for Tango2.
+
+  @author YH Lin
+  @date   2005-01-20
+*/
+
+#include <linux/config.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <asm/tango2/rmdefs.h>
+#include <asm/tango2/memcfg.h>
+#include <asm/tango2/hardware.h>
+#include <asm/tango2/tango2api.h>
+#include <asm/io.h>
+#include <asm/wbflush.h>
+#include <asm/pgalloc.h>
+#include <linux/irq.h>
+#include <linux/sched.h>
+#include <linux/ioport.h>
+
+#if (EM86XX_REVISION > 3)
+
+#ifdef CONFIG_TANGO2_CACHE_PROC_INFO
+#include <linux/proc_fs.h>
+
+extern unsigned long em8xxx_cpu_frequency;
+static int cpucache_info_read_proc(char *buf, char **start, off_t off, int count, int *eof, void *data);
+static unsigned long cpucache_saved_jiffies = 0;
+static unsigned icache_missed = 0, dcache_missed = 0;
+#endif
+#endif /* EM86XX_REVISION > 3 */
+
+#ifdef CONFIG_TANGO2_USE_TLB_REMAP_DRAM1
+/* For Use TLB mapping to map the DRAM1 into KSEG2 */
+extern unsigned long em86xx_tlb_dram1_map_base;
+extern unsigned long em86xx_tlb_dram1_map_size;
+#endif
+
+
+//
+// global variables
+//
+
+//
+// init
+//
+ 
+extern unsigned long em8xxx_kmem_start;
+extern unsigned long em8xxx_kmem_size;
+
+int __init em86xx_init(void)
+{
+	em86xx_mbus_init();
+
+#if !defined(CONFIG_TANGO2_XENV)
+#ifdef CONFIG_TANGO2_UART0_AS_GPIO_FULL
+	gbus_write_uint32(pGBus, REG_BASE_cpu_block + CPU_uart0_gpio_mode, 0x7f7f);
+#endif
+#ifdef CONFIG_TANGO2_UART0_AS_GPIO_PARTIAL
+	gbus_write_uint32(pGBus, REG_BASE_cpu_block + CPU_uart0_gpio_mode, 0x7f6e);
+#endif
+#ifdef CONFIG_TANGO2_UART1_AS_GPIO_FULL
+	gbus_write_uint32(pGBus, REG_BASE_cpu_block + CPU_uart1_gpio_mode, 0x7f7f);
+#endif
+#ifdef CONFIG_TANGO2_UART1_AS_GPIO_PARTIAL
+	gbus_write_uint32(pGBus, REG_BASE_cpu_block + CPU_uart1_gpio_mode, 0x7f6e);
+#endif
+#endif /* !CONFIG_TANGO2_XENV */
+
+#if defined(CONFIG_BLK_DEV_TANGO2_BMIDEDMA) || defined(CONFIG_BLK_DEV_TANGO2_ISAIDEDMA)
+	/* Maximum MBUS bandwidth for IDE */
+	gbus_write_uint32(pGBus, REG_BASE_system_block + MARB_mid02_cfg, 0x11f1f);
+	gbus_write_uint32(pGBus, REG_BASE_system_block + MARB_mid22_cfg, 0x11f1f);
+#endif
+
+#if (EM86XX_REVISION > 3)
+#ifdef CONFIG_TANGO2_CACHE_PROC_INFO
+	create_proc_read_entry("cpucache_info", S_IRUGO, NULL,
+			cpucache_info_read_proc, NULL);
+
+	/* Enable performance monitor and start counting */
+	/* 0: DCache Hit 
+	 * 1: DCache Miss
+	 * 2: TLB Hit
+	 * 3: TLB Miss
+	 * 4: ICache Hit
+	 * 5: ICache Miss
+	 * 6: Instn Complete
+	 * 7: ITLB Hit
+	 * 8: ITLB Miss
+	 * 9: JTLB Hit
+	 * 10: JTLB Miss
+	 * 11: WTB Merge */
+	gbus_write_uint32(pGBus, REG_BASE_cpu_block + CPU_pm_select_1, 32);
+	gbus_write_uint32(pGBus, REG_BASE_cpu_block + CPU_pm_select_0, 2);
+	cpucache_saved_jiffies = jiffies;
+	icache_missed = gbus_read_uint32(pGBus, REG_BASE_cpu_block + CPU_pm_counter_1);
+	dcache_missed = gbus_read_uint32(pGBus, REG_BASE_cpu_block + CPU_pm_counter_0);
+#endif
+
+#ifdef CONFIG_TANGO2_USE_TLB_REMAP_DRAM1 /* Use TLB remap for DRAM1 */
+	{
+		/* Use TLB mapping to map the DRAM1 (size specified by memcfg) into KSEG2 */
+		memcfg_t *m=(memcfg_t *)KSEG1ADDR(MEM_BASE_dram_controller_0+FM_MEMCFG);
+		em86xx_tlb_dram1_map_base = (unsigned long)ioremap(MEM_BASE_dram_controller_1, m->dram1_size);
+		em86xx_tlb_dram1_map_size = m->dram1_size;
+		printk("Creating TLB mapping for 0x%08lx to 0x%08lx, size 0x%08lx.\n", MEM_BASE_dram_controller_1,
+				em86xx_tlb_dram1_map_base, em86xx_tlb_dram1_map_size);
+	}
+#else
+	// remap strategy (use CPU_remap3/4 for 128MB resolution)
+	{
+		printk("Creating CPU mapping for 0x%08lx to 0x%08lx, size 0x%08lx.\n", MEM_BASE_dram_controller_1,
+				CPU_remap3_address, 0x08000000);
+		gbus_write_uint32(pGBus, REG_BASE_cpu_block+CPU_remap3, MEM_BASE_dram_controller_1);
+		gbus_write_uint32(pGBus, REG_BASE_cpu_block+CPU_remap4, MEM_BASE_dram_controller_1+0x04000000);
+		iob() ; // beware bug #4570
+	}
+#endif
+#endif /* EM86XX_REVISION > 3 */
+	return 0;
+}
+
+__initcall(em86xx_init);
+
+#if (EM86XX_REVISION > 3)
+#ifdef CONFIG_TANGO2_CACHE_PROC_INFO
+static int cpucache_info_read_proc(char *page, char **start, off_t off, int count, int *eof, void *data)
+{
+        int len = 0;
+	unsigned long diffj, diffi, diffd, icache_miss, dcache_miss;
+	unsigned long pd, pi;
+        
+	icache_miss = gbus_read_uint32(pGBus, REG_BASE_cpu_block + CPU_pm_counter_1);
+	dcache_miss = gbus_read_uint32(pGBus, REG_BASE_cpu_block + CPU_pm_counter_0);
+	diffj = jiffies - cpucache_saved_jiffies; 
+	cpucache_saved_jiffies = jiffies;
+
+	if (icache_miss < icache_missed)
+		diffi = (0xffffffff - icache_missed) + icache_miss;
+	else
+		diffi = icache_miss - icache_missed;
+	icache_missed = icache_miss;
+
+	if (dcache_miss < dcache_missed)
+		diffd = (0xffffffff - dcache_missed) + dcache_miss;
+	else
+		diffd = dcache_miss - dcache_missed;
+	dcache_missed = dcache_miss;
+
+	/* The average miss per jiffies is (diffx / diffj), per second is then ((diffx * HZ) / diffj).
+	 * Assuming one instruction per clock, we have (((diffx * HZ) / diffj) / em8xxx_cpu_frequency)
+	 * as average ratio of cache miss per instruction at given period of time (from last 
+	 * measured, as expressed as (diffj / HZ)). */
+	pi = ((diffi * HZ) / diffj) / (em8xxx_cpu_frequency / 10000); /* Times 10000 to get percentage */
+	pd = ((diffd * HZ) / diffj) / (em8xxx_cpu_frequency / 10000);
+
+#if 1
+	printk("jiffies(%ld): I-Cache miss ratio(%ld): %ld.%02ld%c, D-Cache miss ratio(%ld): %ld.%02ld%c\n",
+			diffj, diffi, pi / 100, pi % 100, '%', diffd, pd / 100, pd % 100, '%');
+#else
+	len = sprintf(page, "jiffies(%ld): I-Cache miss ratio(%ld): %ld.%02ld%c, D-Cache miss ratio(%ld): %ld.%02ld%c\n",
+			diffj, diffi, pi / 100, pi % 100, '%', diffd, pd / 100, pd % 100, '%');
+#endif
+
+	if (len <= (off + count))
+		*eof = 1;
+ 	*start = page + off;
+ 	len -= off;
+	if (len > count)
+		len = count;
+	if (len < 0)
+		len = 0;
+        return(len);
+}
+#endif
+#endif
+
+//
+// switchbox
+// 
+
+static int g_sbox_map[SBOX_MAX + 1];
+static int lastiface = -1;
+
+static int em86xx_sbox_setup(void);
+static void em86xx_sbox_reset(void);
+
+// Initialize SwitchBox 
+int em86xx_sbox_init(void)
+{
+	em86xx_sbox_setup();
+	em86xx_sbox_reset();
+
+	return 0;
+}
+
+static void em86xx_sbox_reset(void)
+{
+	/* Leave W1/R1 alone. */
+	gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_FIFO_RESET, 0x7d7dfdfd);
+	gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_FIFO_RESET, 0x7d00fd00);
+}
+
+static int em86xx_sbox_setup(void)
+{
+	int i;
+	unsigned int data;
+
+	g_sbox_map[0] = 0xf; /* W0 initially disconnected */
+	g_sbox_map[1] = 0; /* Leave W1 alone */
+
+	g_sbox_map[SBOX_PCIMASTER] = 0xf;
+	g_sbox_map[SBOX_PCISLAVE] = SBOX_PCISLAVE + 1; /* Loopback */
+	g_sbox_map[SBOX_UNUSED1] = 0xf;
+	g_sbox_map[SBOX_IDEDVD] = 0xf;
+	g_sbox_map[SBOX_IDEFLASH] = 0xf;
+	g_sbox_map[SBOX_UNUSED2] = 0xf;
+
+	for (i = SBOX_MAX, data = 0; i >= 0; --i)
+		data = (data << 4) | g_sbox_map[i];
+
+	gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_ROUTE, data);
+	return 0;
+}
+
+/* Connect given interface to R0/W0 channel */
+static int em86xx_sbox_connect(int iface)
+{
+	unsigned int data;
+	int flags, i;
+
+	/* Already connected? */
+	if ((g_sbox_map[0] == iface + 1) && (g_sbox_map[iface] = 1))
+		return(0);
+	else if ((g_sbox_map[0] != 0xf) || (g_sbox_map[iface] != 0xf))
+		return(-1); /* Been occupied */
+
+	local_irq_save(flags);
+	g_sbox_map[0] = iface + 1;
+	g_sbox_map[iface] = 1;
+	lastiface = iface;
+
+	for (i = SBOX_MAX, data = 0; i >= 0; --i)
+		data = (data << 4) | g_sbox_map[i];
+	gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_ROUTE, data);
+	local_irq_restore(flags);
+	return(0);
+}
+
+static void em86xx_sbox_disconnect(int port)
+{
+	unsigned int data;
+	int flags, i;
+
+	if ((port >= 0) && (lastiface >= 0)) {
+		local_irq_save(flags);
+		g_sbox_map[0] = 0xf;
+		g_sbox_map[lastiface] = 0xf;
+		lastiface = -1;
+		for (i = SBOX_MAX, data = 0; i >= 0; --i)
+			data = (data << 4) | g_sbox_map[i];
+		gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_ROUTE, data);
+		local_irq_restore(flags);
+	}
+}
+
+//
+// MBUS interface 
+// 
+
+static int s_mbus_irq_inited[4] = {0,0,0,0};
+static mbus_irq_handler_t s_mbus_irq_handler[4] = {0,0,0,0};
+static void *s_mbus_irq_handler_arg[4] = {NULL, NULL, NULL, NULL};
+
+static void em86xx_mbus_init_irq(int irq);
+static void em86xx_mbus_irq(int irq, void *devinfo, struct pt_regs *regs);
+
+int em86xx_mbus_init(void)
+{
+	return 0;
+}
+
+// idx : [0..3]
+void em86xx_mbus_init_irq(int idx)
+{
+	static char *s_irqname[] = {
+		"TANGO2 MBUS W0", 
+		"TANGO2 MBUS W1", 
+		"TANGO2 MBUS R0", 
+		"TANGO2 MBUS R1", 
+	};
+	
+	if (!s_mbus_irq_inited[idx]) {
+		request_irq(idx + LOG2_CPU_HOST_MBUS_W0_INT + IRQ_CONTROLLER_IRQ_BASE, em86xx_mbus_irq, SA_SHIRQ, s_irqname[idx], (void *)idx);
+		s_mbus_irq_inited[idx] = 1;
+	}
+}
+
+void em86xx_mbus_irq(int irq, void *devinfo, struct pt_regs *regs)
+{
+	int idx = irq - (LOG2_CPU_HOST_MBUS_W0_INT + IRQ_CONTROLLER_IRQ_BASE);
+
+	if (s_mbus_irq_handler[idx]) {
+		(*s_mbus_irq_handler[idx])(irq, s_mbus_irq_handler_arg[idx]);
+		s_mbus_irq_handler[idx] = NULL;
+	}
+}
+
+// sbox : SBOX_xxx
+// fromdev : 
+//   0 : TANGO2 => device (writing) : use Wx port
+//   1 : device => TANGO2 (reading) : use Rx port
+unsigned int em86xx_mbus_alloc_dma(int sbox, int fromdev, unsigned int *pregbase, int *pirq)
+{
+	int port;
+	int x;
+
+	if ((port = em86xx_sbox_connect(sbox)) < 0)
+		port = -1;
+	else
+		x = port + (fromdev ? 0 : 2);
+	
+	if (port >= 0) {
+		if (pirq) 
+			*pirq = LOG2_CPU_HOST_MBUS_W0_INT + IRQ_CONTROLLER_IRQ_BASE + x;
+		if (pregbase) 
+			*pregbase = REG_BASE_host_interface + MIF_W0_ADD + x * 0x40;
+	}
+	return(port);
+}
+
+void em86xx_mbus_free_dma(int port)
+{
+	em86xx_sbox_disconnect(port);
+}
+
+#define MBUS_LINEAR_MAX 	(0x2000 - 1)
+
+int em86xx_mbus_setup_dma_common(unsigned int regbase, int sbox, unsigned int addr, unsigned int count, mbus_irq_handler_t handler, void *arg)
+{
+	int idx = (regbase - REG_BASE_host_interface - MIF_W0_ADD) / 0x40;
+	int flags;
+
+	if (em86xx_mbus_inuse(regbase) != 0) {
+		printk("MBUS Error : previous command is pending\n");
+		em86xx_mbus_wait(regbase, sbox); /* Wait for previous one to complete */
+	}
+
+	if (handler) {
+		em86xx_mbus_init_irq(idx);
+		local_irq_save(flags);
+		s_mbus_irq_handler[idx] = handler;
+		s_mbus_irq_handler_arg[idx] = arg;
+		local_irq_restore(flags);
+
+	}
+
+	return 0;
+}
+
+void em86xx_mbus_setup_dma_linear(unsigned int regbase, int sbox, unsigned int addr, unsigned int count)
+{
+	if (em86xx_mbus_inuse(regbase) != 0) {
+		printk("MBUS Error : previous command is pending (%d)\n",
+			gbus_read_uint32(pGBus, regbase + MIF_cmd_offset));
+		em86xx_mbus_wait(regbase, sbox); /* Wait for previous one to complete */
+	}
+	gbus_write_uint32(pGBus, regbase + MIF_add_offset, addr);
+	gbus_write_uint32(pGBus, regbase + MIF_cnt_offset, count);
+	gbus_write_uint32(pGBus, regbase + MIF_cmd_offset, 0x5);
+}
+
+void em86xx_mbus_setup_dma_double(unsigned int regbase, int sbox, unsigned int addr, unsigned int count, unsigned int addr2, unsigned int count2)
+{
+	if (em86xx_mbus_inuse(regbase) != 0) {
+		printk("MBUS Error : previous command is pending (%d)\n",
+			gbus_read_uint32(pGBus, regbase + MIF_cmd_offset));
+		em86xx_mbus_wait(regbase, sbox); /* Wait for previous one to complete */
+	}
+
+	gbus_write_uint32(pGBus, regbase + MIF_add_offset, addr);
+	gbus_write_uint32(pGBus, regbase + MIF_cnt_offset, (count2 << 16) | count);
+	gbus_write_uint32(pGBus, regbase + MIF_add2_skip_offset, addr2);
+	gbus_write_uint32(pGBus, regbase + MIF_cmd_offset, 0x6);
+}
+
+void em86xx_mbus_setup_dma_rectangle(unsigned int regbase, int sbox, unsigned int addr, unsigned int horiz, unsigned int lines, int skip)
+{
+	if (em86xx_mbus_inuse(regbase) != 0) {
+		printk("MBUS Error : previous command is pending (%d)\n",
+			gbus_read_uint32(pGBus, regbase + MIF_cmd_offset));
+		em86xx_mbus_wait(regbase, sbox); /* Wait for previous one to complete */
+	}
+
+	gbus_write_uint32(pGBus, regbase + MIF_add_offset, addr);
+	gbus_write_uint32(pGBus, regbase + MIF_cnt_offset, (lines << 16) | horiz);
+	gbus_write_uint32(pGBus, regbase + MIF_add2_skip_offset, horiz);
+	gbus_write_uint32(pGBus, regbase + MIF_cmd_offset, 0x7);
+}
+
+int em86xx_mbus_setup_dma(unsigned int regbase, int sbox, unsigned int addr, unsigned int count, mbus_irq_handler_t handler, void *arg)
+{
+	if (em86xx_mbus_setup_dma_common(regbase, sbox, addr, count, handler, arg))
+		return 1;
+
+	if (em86xx_mbus_inuse(regbase) != 0) 
+		em86xx_mbus_wait(regbase, sbox); /* Wait for previous one to complete */
+
+	if (count <= MBUS_LINEAR_MAX) {
+		// try linear
+		// printk("Linear\n");
+		em86xx_mbus_setup_dma_linear(regbase, sbox, addr, count);
+	} else if (count <= (MBUS_LINEAR_MAX * 2)) {
+		// try double
+		// printk("Double (%04x, %004x)\n", MBUS_LINEAR_MAX, count - MBUS_LINEAR_MAX);
+		em86xx_mbus_setup_dma_double(regbase, sbox, addr, MBUS_LINEAR_MAX, addr + MBUS_LINEAR_MAX, count - MBUS_LINEAR_MAX);
+	} else {
+		unsigned int i, horiz, lines, sz;
+
+		// try rectangle
+		for (i = 0, horiz = 1, sz = count; (i < 12) && ((sz & 0x01) == 0); ++i, horiz <<= 1, sz >>= 1) 
+			;
+		lines = count >> i;
+		if (horiz > MBUS_LINEAR_MAX || lines > MBUS_LINEAR_MAX) {
+			printk("MBUS Error : too big to transfer (%d, %d)\n", horiz, lines);
+			return 1;
+		} else if ((horiz * lines) != count) {
+			printk("MBUS Error : indivisible size %d (%d, %d)\n", count, horiz, lines);
+			return 1;
+		}
+		// printk("Rectangle (%d x %d)\n", horiz, lines);
+		em86xx_mbus_setup_dma_rectangle(regbase, sbox, addr, horiz, lines, horiz);
+	}
+
+	return 0;
+}
+
+int em86xx_mbus_inuse(unsigned int regbase)
+{
+	return ((gbus_read_uint32(pGBus, regbase + MIF_cmd_offset) & 0x7) != 0) ? 1 : 0;
+}
+
+/* Note: 06/24/2004 there're errors in the spec. The bit assignments should be
+	(* indicates error)
+	Bit 0/8: MBUS_R0_SBOX
+	Bit 1/9: MBUS_R1_SBOX
+	Bit 2/10: PCI_MASTER_SBOX
+	Bit 3/11: PCI_SLAVE_SBOX
+	Bit 4/12: CIPHER_SBOX
+	Bit 5/13: IDE_ISA_SBOX*
+	Bit 6/14: IDE_DVD_SBOX*
+	Bit 7/15: SFLA_SBOX
+	Bit 16/24: SBOX_MBUS_W0*
+	Bit 17/25: SBOX_MBUS_W1*
+	Bit 18/26: SBOX_PCI_MASTER*
+	Bit 19/27: SBOX_PCI_SLAVE*
+	Bit 20/28: SBOX_CIPHER*
+	Bit 21/29: SBOX_ISA*
+	Bit 22/30: SBOX_DVD*
+*/
+static unsigned int sbox_reset_vals[2][4] = {
+			{0x01012020, 0x02022020, 0x20200101, 0x20200202},
+			{0x01014040, 0x02024040, 0x40400101, 0x40400202}};
+static unsigned int sbox_unreset_vals[2][4] = {
+			{0x01002000, 0x02002000, 0x20000100, 0x20000200},
+			{0x01004000, 0x02004000, 0x40000100, 0x40000200}};
+
+void em86xx_mbus_reset(unsigned int regbase, int sbox)
+{
+	/* Clear MBUS transaction */
+	int midx = (regbase - REG_BASE_host_interface - MIF_W0_ADD) / 0x40;
+	int sidx = sbox - SBOX_IDEFLASH;
+
+	if (em86xx_mbus_inuse(regbase) != 0) {
+		int cnt;
+		if (((midx < 0) || (midx > 3)) || ((sidx < 0) || (sidx > 2))) {
+			printk("MBUS reset: out of range, midx %d, sidx %d\n", midx, sidx);
+			return;
+		}	
+		gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_FIFO_RESET, sbox_reset_vals[sidx][midx]);
+		udelay(1);
+		gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_FIFO_RESET, sbox_unreset_vals[sidx][midx]);
+		for (cnt = 0; (cnt < 1000) && (em86xx_mbus_inuse(regbase) != 0); cnt++)
+			udelay(1);
+		if (cnt >= 1000)
+			printk("MBUS reset timeout\n");
+	}
+}
+
+int em86xx_mbus_wait(unsigned int regbase, int sbox)
+{
+#define MBUS_TIMEOUT	200000 /* Max. 200msec */
+
+	int timeout = MBUS_TIMEOUT, try = 1;
+
+	do {
+		if (timeout == 0)
+			timeout = MBUS_TIMEOUT;
+
+		while ((em86xx_mbus_inuse(regbase) != 0) && (--timeout != 0))
+			udelay(1);
+
+		if (timeout == 0) { /* Timeout happened */
+			if (sbox == SBOX_IDEFLASH) {
+				printk("MBUS timeout : MBUS CMD = %d, PB Automode = %08x\n", 
+					gbus_read_uint32(pGBus, regbase + MIF_cmd_offset) & 0x7, 
+					gbus_read_uint32(pGBus, REG_BASE_host_interface + PB_automode_control));
+			} else {
+				printk("MBUS timeout : MBUS CMD = %d\n", 
+					gbus_read_uint32(pGBus, regbase + MIF_cmd_offset) & 0x7);
+			}
+			printk("MBUS registers : %08x %08x %08x %08x\n", 
+				gbus_read_uint32(pGBus, regbase + MIF_add_offset),
+				gbus_read_uint32(pGBus, regbase + MIF_cnt_offset),
+				gbus_read_uint32(pGBus, regbase + MIF_add2_skip_offset),
+				gbus_read_uint32(pGBus, regbase + MIF_cmd_offset));
+			if (--try == 0) {
+				printk("MBUS fails, resetting %d ..\n", sbox);
+				em86xx_mbus_reset(regbase, sbox);
+
+				/* If not able to reset, return 1, so the DMA
+				   can be disabled accordingly  */
+				return (em86xx_mbus_inuse(regbase) != 0) ? 1 : 0;
+			}
+		} else if (sbox == SBOX_IDEFLASH) {
+			int i;
+			unsigned int automode = gbus_read_uint32(pGBus, REG_BASE_host_interface + PB_automode_control);
+			if ((automode & 0xffff) != 0) {
+				for (i = 0; (gbus_read_uint32(pGBus, REG_BASE_host_interface + PB_automode_control) & 0xffff) && (i < MBUS_TIMEOUT); i++)
+					udelay(1);
+				if (i >= MBUS_TIMEOUT) {
+					printk("MBUS : automode register is not empty : %08x\n",
+						gbus_read_uint32(pGBus, REG_BASE_host_interface + PB_automode_control));
+					if (--try == 0)
+						return(1);
+					else
+						timeout = 0;
+				}
+			}
+			break;
+		} else
+			break;
+	} while (timeout == 0);
+
+	return(0);
+}
+
+/* Fancy version of memcpy, both dst and src need to be physical address */
+int mbus_memcpy(u32 dst, u32 src, u32 size)
+{
+	/* Save the old SBOX route */
+	u32 sbox_route = gbus_read_uint32(pGBus, REG_BASE_host_interface + SBOX_ROUTE) & 0xffffff0f;
+	u32 w0_base = REG_BASE_host_interface + MIF_W0_ADD;
+	u32 r0_base = REG_BASE_host_interface + MIF_R0_ADD;
+
+	/* Hook up W0/R0 and left W1/R1 the same as before */
+	gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_ROUTE, 0xffffff01);
+	
+	if (em86xx_mbus_setup_dma(w0_base, SBOX_MBUS_W0, dst, size, NULL, NULL) != 0) {
+		gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_ROUTE, sbox_route);
+		return(0);
+	} else if (em86xx_mbus_setup_dma(r0_base, SBOX_MBUS_W0 /* HACK */, src, size, NULL, NULL) != 0) {
+		/* TODO: should reset W0 */
+		printk("MBUS: need to reset W0 channel.\n");
+		gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_ROUTE, sbox_route);
+		return(0);
+	}
+
+	/* TODO: a timeout mechanism should be added to reset W0/R0 */
+	while (em86xx_mbus_inuse(r0_base) != 0)
+		;
+	while (em86xx_mbus_inuse(w0_base) != 0)
+		;
+
+	/* Restore SBOX route once we're done */
+	gbus_write_uint32(pGBus, REG_BASE_host_interface + SBOX_ROUTE, sbox_route);
+	return(size);
+}
+
+//
+// GPIO
+//
+
+int em86xx_gpio_read(int gpio)
+{
+#if (EM86XX_REVISION > 3)
+	if ((gpio >= 0) && (gpio < 16))
+		return (gbus_read_uint32(pGBus, REG_BASE_system_block + SYS_gpio_data) >> gpio) & 1;
+	else /* Upper 16 */
+		return (gbus_read_uint32(pGBus, REG_BASE_host_interface + ETH_gpio_data2) >> (gpio - 16)) & 1;
+#else
+	return (gbus_read_uint32(pGBus, REG_BASE_system_block + SYS_gpio_data) >> gpio) & 1;
+#endif
+}
+
+void em86xx_gpio_write(int gpio, int data)
+{
+#if (EM86XX_REVISION > 3)
+	if ((gpio >= 0) && (gpio < 16))
+		gbus_write_uint32(pGBus, REG_BASE_system_block + SYS_gpio_data,
+				data ? GPIO_DATA_SET(gpio) : GPIO_DATA_CLEAR(gpio));
+	else /* Upper 16 */
+		gbus_write_uint32(pGBus, REG_BASE_host_interface + ETH_gpio_data2,
+				data ? GPIO_DATA_SET(gpio - 16) : GPIO_DATA_CLEAR(gpio - 16));
+#else
+	gbus_write_uint32(pGBus, REG_BASE_system_block + SYS_gpio_data,
+		data ? GPIO_DATA_SET(gpio) : GPIO_DATA_CLEAR(gpio));
+#endif
+}
+
+void em86xx_gpio_setdirection(int gpio, int dir)
+{
+#if (EM86XX_REVISION > 3)
+	if ((gpio >= 0) && (gpio < 16))
+		gbus_write_uint32(pGBus, REG_BASE_system_block + SYS_gpio_dir,
+				dir ? GPIO_DIR_OUTPUT(gpio) : GPIO_DIR_INPUT(gpio));
+	else /* Upper 16 */
+		gbus_write_uint32(pGBus, REG_BASE_host_interface + ETH_gpio_dir2,
+				dir ? GPIO_DIR_OUTPUT(gpio - 16) : GPIO_DIR_INPUT(gpio - 16));
+#else
+	gbus_write_uint32(pGBus, REG_BASE_system_block + SYS_gpio_dir,
+		dir ? GPIO_DIR_OUTPUT(gpio) : GPIO_DIR_INPUT(gpio));
+#endif
+}
+
+#if defined(CONFIG_TANGO2_UART0_AS_GPIO_FULL) || defined(CONFIG_TANGO2_UART0_AS_GPIO_PARTIAL) || defined(CONFIG_TANGO2_XENV)
+int em86xx_uart0_gpio_read(int gpio)
+{
+	return (gbus_read_uint16(pGBus, REG_BASE_cpu_block + CPU_uart0_gpio_data) >> gpio) & 1;
+}
+
+void em86xx_uart0_gpio_write(int gpio, int data)
+{
+	gbus_write_uint16(pGBus, REG_BASE_cpu_block + CPU_uart0_gpio_data,
+		data ? UART_GPIO_DATA_SET(gpio) : UART_GPIO_DATA_CLEAR(gpio));
+}
+
+void em86xx_uart0_gpio_setdirection(int gpio, int dir)
+{
+	gbus_write_uint16(pGBus, REG_BASE_cpu_block + CPU_uart0_gpio_dir, 
+		dir ? UART_GPIO_DIR_OUTPUT(gpio) : UART_GPIO_DIR_INPUT(gpio));
+}
+#endif
+
+#if defined(CONFIG_TANGO2_UART1_AS_GPIO_FULL) || defined(CONFIG_TANGO2_UART1_AS_GPIO_PARTIAL) || defined(CONFIG_TANGO2_XENV)
+int em86xx_uart1_gpio_read(int gpio)
+{
+	return (gbus_read_uint16(pGBus, REG_BASE_cpu_block + CPU_uart1_gpio_data) >> gpio) & 1;
+}
+
+void em86xx_uart1_gpio_write(int gpio, int data)
+{
+	gbus_write_uint16(pGBus, REG_BASE_cpu_block + CPU_uart1_gpio_data, 
+		data ? UART_GPIO_DATA_SET(gpio) : UART_GPIO_DATA_CLEAR(gpio));
+}
+
+void em86xx_uart1_gpio_setdirection(int gpio, int dir)
+{
+	gbus_write_uint16(pGBus, REG_BASE_cpu_block + CPU_uart1_gpio_dir, 
+		dir ? UART_GPIO_DIR_OUTPUT(gpio) : UART_GPIO_DIR_INPUT(gpio));
+}
+#endif
+
+EXPORT_SYMBOL(mbus_memcpy);
+EXPORT_SYMBOL(em86xx_mbus_wait);
+EXPORT_SYMBOL(em86xx_mbus_reset);
+EXPORT_SYMBOL(em86xx_mbus_free_dma);
+EXPORT_SYMBOL(em86xx_mbus_setup_dma);
+EXPORT_SYMBOL(em86xx_mbus_alloc_dma);
+EXPORT_SYMBOL(em86xx_mbus_setup_dma_linear);
+EXPORT_SYMBOL(em86xx_mbus_setup_dma_double);
+EXPORT_SYMBOL(em86xx_mbus_setup_dma_rectangle);
+EXPORT_SYMBOL(em86xx_gpio_read);
+EXPORT_SYMBOL(em86xx_gpio_write);
+EXPORT_SYMBOL(em86xx_gpio_setdirection);
+
+#if defined(CONFIG_TANGO2_UART0_AS_GPIO_FULL) || defined(CONFIG_TANGO2_UART0_AS_GPIO_PARTIAL) || defined(CONFIG_TANGO2_XENV)
+EXPORT_SYMBOL(em86xx_uart0_gpio_read);
+EXPORT_SYMBOL(em86xx_uart0_gpio_write);
+EXPORT_SYMBOL(em86xx_uart0_gpio_setdirection);
+#endif
+
+#if defined(CONFIG_TANGO2_UART1_AS_GPIO_FULL) || defined(CONFIG_TANGO2_UART1_AS_GPIO_PARTIAL) || defined(CONFIG_TANGO2_XENV)
+EXPORT_SYMBOL(em86xx_uart1_gpio_read);
+EXPORT_SYMBOL(em86xx_uart1_gpio_write);
+EXPORT_SYMBOL(em86xx_uart1_gpio_setdirection);
+#endif
+
+/* Convert given virtual address into physical address, based on current running context */
+/* One only restriction is that this area needs to be read-able */
+static unsigned long em86xx_virt2phys(unsigned long vaddr)
+{
+	extern asmlinkage unsigned long __em86xx_vfn2pfn(unsigned long vaddr, int odd);
+	unsigned long pfn, flags, phys_addr;
+	unsigned long offset;
+	int odd;
+
+	/* KSEG0 or KSEG1, easy conversion */
+	if ((vaddr >= KSEG0) && (vaddr < KSEG2)) {
+#ifdef CONFIG_TANGO2_USE_TLB_REMAP_DRAM1 /* Use TLB remap for DRAM1 */
+		return(CPHYSADDR(vaddr));
+#else
+		phys_addr = CPHYSADDR(vaddr);
+		if ((phys_addr >= CPU_remap3_address) && (phys_addr < MEM_BASE_dram_controller_0)) { /* CPU_remap3/4 is used */
+			return(MEM_BASE_dram_controller_1 + (phys_addr - CPU_remap3_address));
+		}
+#endif
+	}
+
+	flush_tlb_all(); /* No direct translation, we need to do more */
+
+	/* We'll need to simulate TLB miss to get the translation */
+	offset = vaddr & (PAGE_SIZE - 1);
+	odd = (((vaddr >> PAGE_SHIFT) & 1) ? 1 : 0); /* Odd page or not? */
+	pfn = (unsigned long)(*((volatile unsigned long *)(vaddr & PAGE_MASK))); /* Make sure it'd be loaded */
+
+	save_and_cli(flags);
+	pfn = __em86xx_vfn2pfn(vaddr & PAGE_MASK, odd);
+	restore_flags(flags);
+	phys_addr = (pfn << PAGE_SHIFT) | offset;
+	return(phys_addr);
+}
+
+/* Given any virtual address, tell if address belongs to kernel space */
+int em86xx_is_kmem(unsigned long vaddr, unsigned long *physaddr)
+{
+	unsigned long paddr = em86xx_virt2phys(vaddr);
+	unsigned long kstart = CPHYSADDR(em8xxx_kmem_start);
+	int ret;
+	*physaddr = paddr;
+	ret = (((paddr >= kstart) && (paddr < (kstart + em8xxx_kmem_size))) ? 1 : 0);
+//	printk("Reverse lookup of 0x%08lx => 0x%08lx (Kernel memory: %s).\n", vaddr, paddr, ret ? "Yes" : "No");
+	return(ret);
+}
+
+EXPORT_SYMBOL(em86xx_is_kmem);
+
diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linuxmips-2.4.30.ref/arch/mips/tango2/tango2IRQ.S linuxmips-2.4.30/arch/mips/tango2/tango2IRQ.S
--- linuxmips-2.4.30.ref/arch/mips/tango2/tango2IRQ.S	2006-09-18 18:34:25.000000000 -0700
+++ linuxmips-2.4.30/arch/mips/tango2/tango2IRQ.S	2006-09-18 18:36:04.000000000 -0700
@@ -5,7 +5,13 @@
 #include <asm/mipsregs.h>
 #include <asm/regdef.h>
 #include <asm/stackframe.h>
-
+#include <asm/current.h>
+#include <asm/offset.h>
+#include <asm/cachectl.h>
+#include <asm/fpregdef.h>
+#include <asm/page.h>
+#include <asm/pgtable.h>
+#include <asm/processor.h>
 #include <asm/tango2/tango2.h>
 
 	.text
@@ -60,5 +66,46 @@
 	nop
 
 3:	j	spurious_interrupt
-END(tango2IRQ)
+	END(tango2IRQ)
+
+/*
+ * This function is used to translate the virtual address into physical one, the
+ * virtual address needs to be in KUSEG or KSEG2 -- modified from except_vec0_r4000
+ * refer to ../mm/tlbex-mips32.S for details.
+ */
+	.set	noreorder
+	.set	noat
+	LEAF(__em86xx_vfn2pfn)
+	.set	mips3
+
+	addu	t0, a0, zero
+	lw	t1, pgd_current			# get pgd pointer
+	nop
+	srl	t0, t0, _PGDIR_SHIFT		# get pgd only bits
 
+	sll	t0, t0, 2
+	addu	t1, t1, t0			# add in pgd offset
+
+	mfc0	t0, CP0_CONTEXT			# get context reg
+	lw	t1, (t1)
+	srl	t0, t0, 1			# get pte offset
+	and	t0, t0, 0xff8
+	addu	t1, t1, t0			# add in offset
+
+	bnez	a1, 1f				# a1==odd_flag
+	nop
+	lw	t0, 0(t1)			# get even pte
+	srl	t0, t0, 6
+	b	2f
+	add	v0, t0, zero
+
+1:
+	lw	t1, 4(t1)			# get odd pte
+	srl	t1, t1, 6
+	add	v0, t1, zero
+
+2:
+	jr	ra
+	srl	v0, v0, 6
+	
+	END(__em86xx_vfn2pfn)
diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linuxmips-2.4.30.ref/include/asm-mips/tango2/tango2api.h linuxmips-2.4.30/include/asm-mips/tango2/tango2api.h
--- linuxmips-2.4.30.ref/include/asm-mips/tango2/tango2api.h	1969-12-31 16:00:00.000000000 -0800
+++ linuxmips-2.4.30/include/asm-mips/tango2/tango2api.h	2006-09-18 18:36:49.000000000 -0700
@@ -0,0 +1,120 @@
+/*
+ * include/asm-arm/arch-em86xx/em86xxapi.h
+ *
+ * Copyright 2002-2004, Sigma Designs, Inc 
+ *
+ * This file contains EM86XX controling functions
+ *
+ * by Ho Lee 03/07/2003
+ */
+
+#ifndef __ASM_ARCH_EM86XX_H
+#define __ASM_ARCH_EM86XX_H
+#include <asm/tango2/hardware.h>
+//
+// global variables
+// 
+
+//
+// from arch/arm/arch-em86xx/irq.c
+//
+
+// irq
+void em86xx_mask_irq(unsigned int irq);
+void em86xx_unmask_irq(unsigned int irq);
+void em86xx_wait_irq(unsigned int irq);
+
+// fiq
+void em86xx_mask_fiq(unsigned int fiq);
+void em86xx_unmask_fiq(unsigned int fiq);
+
+// software interrupt
+int em86xx_softirq_isset(int irq);
+void em86xx_softirq_set(int irq);
+void em86xx_softirq_clr(int irq);
+void em86xx_irq_clr(int irq);
+
+//
+// from arch/arm/arch-em86xx/em86xxapi.c
+//
+
+// Cache
+// clean : write dirty buffer (D cache only)
+// invalidate : invalidate the contents of cache (I & D cache)
+// flush : clean + invalidate
+void em86xx_get_cache_state(int *picache, int *pdcache, int *pwriteback);
+void em86xx_enable_cache(int icache, int dcache, int writeback);
+void em86xx_clean_cache_data(void);
+void em86xx_clean_cache_data_region(unsigned int from, unsigned int to);
+void em86xx_invalidate_cache_instruction(void);
+void em86xx_invalidate_cache_instruction_region(unsigned int from, unsigned int to);
+void em86xx_invalidate_cache_data(void);
+void em86xx_invalidate_cache_data_region(unsigned int from, unsigned int to);
+
+void em86xx_flush_cache_all(void);
+void em86xx_flush_cache_data(void);
+void em86xx_flush_cache_data_region(unsigned int from, unsigned int to);
+
+// memory
+unsigned int em86xx_get_pciregionsize(void);
+unsigned int em86xx_get_dmamemorysize(void);
+
+// switchbox (Host interface)
+enum { 
+	SBOX_MBUS_W0 = 0, SBOX_MBUS_W1, SBOX_PCIMASTER, SBOX_PCISLAVE, 
+	SBOX_UNUSED1, SBOX_IDEFLASH, SBOX_IDEDVD, SBOX_UNUSED2, SBOX_MAX = SBOX_UNUSED2,
+};
+
+int em86xx_sbox_init(void);
+#if 0
+void em86xx_sbox_reset(void);
+int em86xx_sbox_setup(void);
+int em86xx_sbox_connect(int iface);
+void em86xx_sbox_disconnect(int port);
+#endif
+
+// MBUS DMA 
+typedef void (*mbus_irq_handler_t)(int irq, void *arg);
+
+int em86xx_mbus_init(void);
+unsigned int em86xx_mbus_alloc_dma(int sbox, int fromdev, unsigned int *pregbase, int *pirq);
+void em86xx_mbus_free_dma(int port);
+
+int em86xx_mbus_setup_dma_common(unsigned int regbase, int sbox, unsigned int addr, unsigned int count, mbus_irq_handler_t handler, void *arg);
+void em86xx_mbus_setup_dma_linear(unsigned int regbase, int sbox, unsigned int addr, unsigned int count);
+void em86xx_mbus_setup_dma_double(unsigned int regbase, int sbox, unsigned int addr, unsigned int count, unsigned int addr2, unsigned int count2);
+void em86xx_mbus_setup_dma_rectangle(unsigned int regbase, int sbox, unsigned int addr, unsigned int horiz, unsigned int lines, int skip);
+int em86xx_mbus_setup_dma(unsigned int regbase, int sbox, unsigned int addr, unsigned int count, mbus_irq_handler_t handler, void *arg);
+int em86xx_mbus_inuse(unsigned int regbase);
+int em86xx_mbus_wait(unsigned int regbase, int sbox);
+void em86xx_mbus_reset(unsigned int regbase, int sbox);
+
+// PCI master
+void em86xx_pcimaster_setup_read(unsigned int addr, unsigned int count);
+void em86xx_pcimaster_start_read(int start);
+void em86xx_pcimaster_setup_write(unsigned int addr, unsigned int count);
+void em86xx_pcimaster_start_write(int start);
+
+// GPIO
+#define GPIO_INPUT		0
+#define GPIO_OUTPUT		1
+
+int em86xx_gpio_read(int gpio);
+void em86xx_gpio_write(int gpio, int data);
+void em86xx_gpio_setdirection(int gpio, int dir);
+
+#if defined(CONFIG_EM86XX_UART0_AS_GPIO_FULL) || defined(CONFIG_EM86XX_UART0_AS_GPIO_PARTIAL) || defined(CONFIG_TANGO2_XENV)
+int em86xx_uart0_gpio_read(int gpio);
+void em86xx_uart0_gpio_write(int gpio, int data);
+void em86xx_uart0_gpio_setdirection(int gpio, int dir);
+#endif
+#if defined(CONFIG_EM86XX_UART1_AS_GPIO_FULL) || defined(CONFIG_EM86XX_UART1_AS_GPIO_PARTIAL) || defined(CONFIG_TANGO2_XENV)
+int em86xx_uart1_gpio_read(int gpio);
+void em86xx_uart1_gpio_write(int gpio, int data);
+void em86xx_uart1_gpio_setdirection(int gpio, int dir);
+#endif
+
+int em86xx_is_kmem(unsigned long vaddr, unsigned long *physaddr);
+
+#endif
+
diff -Naur --exclude=CVS --exclude='*.o' --exclude='*.a' --exclude='*.so' --exclude='*.elf' --exclude=System.map --exclude=Makefile.d --exclude='*log' --exclude='*log2' --exclude='*~' --exclude='.*~' --exclude='.#*' --exclude='*.bak' --exclude='*.orig' --exclude='*.rej' --exclude='core.[0-9]*' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=.depend --exclude='.*.o.flags' --exclude='*.gz' --exclude=vmlinux --exclude=vmlinux.bin --exclude=yamon-02.06-SIGMADESIGNS-01_el.bin linuxmips-2.4.30.ref/README.1005.sbox-mbus-gpio.patch linuxmips-2.4.30/README.1005.sbox-mbus-gpio.patch
--- linuxmips-2.4.30.ref/README.1005.sbox-mbus-gpio.patch	1969-12-31 16:00:00.000000000 -0800
+++ linuxmips-2.4.30/README.1005.sbox-mbus-gpio.patch	2006-09-18 18:37:37.000000000 -0700
@@ -0,0 +1,20 @@
+Feature:
+--------
+SBOX/MBUS/GPIO common support for SMP863x.
+
+Prerequisite patch numbers:
+---------------------------
+0000
+1000
+1003
+
+Primary author:
+---------------
+YH Lin
+
+Related to which chip version SMP863x x=?
+-----------------------------------------
+all
+
+(linux patches) which CONFIG_... are provided:
+----------------------------------------------
